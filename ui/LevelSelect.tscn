[gd_scene load_steps=2 format=3 uid="uid://b876esv8vkn8g"]

[sub_resource type="GDScript" id="GDScript_u45df"]
script/source = "extends CanvasLayer
class_name LevelSelect

@onready var level_list: VBoxContainer = $UI/ScrollContainer/LevelList
@onready var back_button: Button = $UI/ButtonContainer/BackButton
@onready var refresh_button: Button = $UI/ButtonContainer/RefreshButton

var selected_level_index: int = 0
var level_buttons: Array[Button] = []

func _ready():
	# Connect to LevelLoader signals
	LevelLoader.level_loaded.connect(_on_level_loaded)
	LevelLoader.level_load_failed.connect(_on_level_load_failed)
	LevelLoader.loading_started.connect(_on_loading_started)
	
	# Connect button signals
	back_button.pressed.connect(_on_back_button_pressed)
	refresh_button.pressed.connect(_on_refresh_button_pressed)
	
	# Populate level list
	populate_level_list()

func _input(event):
	if Input.is_action_just_pressed(\"pause\"):
		_on_back_button_pressed()
	elif Input.is_action_just_pressed(\"restart\"):
		_on_refresh_button_pressed()

func populate_level_list():
	# Clear existing buttons
	for child in level_list.get_children():
		child.queue_free()
	
	level_buttons.clear()
	var levels = LevelLoader.get_all_levels()
	
	# Sort levels by order
	var level_order = [\"Level00\", \"CrateTest\", \"CollectibleTest\", \"DimensionTest\", \"EnemyGauntlet\", \"Level01\", \"Level02\", \"Level03\", \"Chase01\"]
	
	for level_id in level_order:
		if level_id in levels:
			var level_info = levels[level_id]
			create_level_button(level_id, level_info)

func create_level_button(level_id: String, level_info: Dictionary):
	var container = HBoxContainer.new()
	level_list.add_child(container)
	
	# Level info panel
	var info_panel = VBoxContainer.new()
	info_panel.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	container.add_child(info_panel)
	
	# Level name
	var name_label = Label.new()
	name_label.text = level_info.get(\"name\", level_id)
	name_label.add_theme_font_size_override(\"font_size\", 18)
	info_panel.add_child(name_label)
	
	# Level description
	var desc_label = Label.new()
	desc_label.text = level_info.get(\"description\", \"No description available\")
	desc_label.add_theme_font_size_override(\"font_size\", 12)
	desc_label.modulate = Color.GRAY
	info_panel.add_child(desc_label)
	
	# Stats container
	var stats_container = HBoxContainer.new()
	info_panel.add_child(stats_container)
	
	# Best time
	var time_label = Label.new()
	var best_time = level_info.get(\"best_time\", 0.0)
	if best_time > 0.0:
		time_label.text = \"Best: %.1fs\" % best_time
	else:
		time_label.text = \"Best: --\"
	time_label.add_theme_font_size_override(\"font_size\", 10)
	stats_container.add_child(time_label)
	
	# Spacer
	var spacer = Control.new()
	spacer.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	stats_container.add_child(spacer)
	
	# Best score
	var score_label = Label.new()
	var best_score = level_info.get(\"best_score\", 0)
	score_label.text = \"Score: %d\" % best_score
	score_label.add_theme_font_size_override(\"font_size\", 10)
	stats_container.add_child(score_label)
	
	# Button container
	var button_container = VBoxContainer.new()
	container.add_child(button_container)
	
	# Play button
	var play_button = Button.new()
	var is_unlocked = level_info.get(\"unlocked\", false)
	
	if is_unlocked:
		play_button.text = \"PLAY\"
		play_button.pressed.connect(func(): LevelLoader.goto(level_id))
	else:
		play_button.text = \"LOCKED\"
		play_button.disabled = true
	
	button_container.add_child(play_button)
	level_buttons.append(play_button)
	
	# Time trial button
	var time_trial_button = Button.new()
	var time_trial_unlocked = level_info.get(\"time_trial_unlocked\", false)
	
	if time_trial_unlocked:
		time_trial_button.text = \"TIME TRIAL\"
		time_trial_button.pressed.connect(func(): LevelLoader.load_time_trial(level_id))
	else:
		time_trial_button.text = \"TT LOCKED\"
		time_trial_button.disabled = true
	
	button_container.add_child(time_trial_button)
	level_buttons.append(time_trial_button)
	
	# Add separator
	var separator = HSeparator.new()
	level_list.add_child(separator)

func _on_level_loaded(level_name: String):
	print(\"Level loaded successfully: \", level_name)

func _on_level_load_failed(level_name: String):
	print(\"Failed to load level: \", level_name)
	# Could show error dialog here

func _on_loading_started(level_name: String):
	print(\"Started loading level: \", level_name)

func _on_back_button_pressed():
	# Redirect to the new level map
	get_tree().change_scene_to_file(\"res://ui/LevelMap.tscn\")

func _on_refresh_button_pressed():
	# Refresh the level list
	populate_level_list()
"

[node name="LevelSelect" type="CanvasLayer"]
script = SubResource("GDScript_u45df")

[node name="Background" type="ColorRect" parent="."]
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
color = Color(0.1, 0.1, 0.2, 1)

[node name="UI" type="VBoxContainer" parent="."]
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -400.0
offset_top = -300.0
offset_right = 400.0
offset_bottom = 300.0
grow_horizontal = 2
grow_vertical = 2

[node name="Title" type="Label" parent="UI"]
layout_mode = 2
theme_override_font_sizes/font_size = 32
text = "LEVEL SELECT"
horizontal_alignment = 1

[node name="HSeparator" type="HSeparator" parent="UI"]
layout_mode = 2

[node name="ScrollContainer" type="ScrollContainer" parent="UI"]
layout_mode = 2
size_flags_vertical = 3

[node name="LevelList" type="VBoxContainer" parent="UI/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3

[node name="HSeparator2" type="HSeparator" parent="UI"]
layout_mode = 2

[node name="ButtonContainer" type="HBoxContainer" parent="UI"]
layout_mode = 2

[node name="BackButton" type="Button" parent="UI/ButtonContainer"]
layout_mode = 2
size_flags_horizontal = 3
theme_override_font_sizes/font_size = 16
text = "BACK TO MENU"

[node name="RefreshButton" type="Button" parent="UI/ButtonContainer"]
layout_mode = 2
size_flags_horizontal = 3
theme_override_font_sizes/font_size = 16
text = "REFRESH"

[connection signal="pressed" from="UI/ButtonContainer/BackButton" to="." method="_on_back_button_pressed"]
[connection signal="pressed" from="UI/ButtonContainer/RefreshButton" to="." method="_on_refresh_button_pressed"]
