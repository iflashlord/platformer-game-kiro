[gd_scene load_steps=9 format=3 uid="uid://bpouijp6gbfpm"]

[ext_resource type="Script" uid="uid://cxf8gb242c2s8" path="res://systems/DebugBorder.gd" id="3_debug"]

[sub_resource type="GDScript" id="GDScript_4n3vw"]
script/source = "extends Crate
class_name NitroCrate

@export var fuse_time: float = 1.0  # Faster than TNT (3.0)
@export var explosion_radius: float = 200.0  # Larger than TNT (150.0)
@export var explosion_damage: float = 2.0  # Same as TNT but will be applied as 2 hearts

var is_fuse_lit: bool = false
var fuse_timer: float = 0.0

@onready var fuse_light: ColorRect = $WarningSprite

func _ready():
	super._ready()
	crate_type = \"nitro\"
	shard_color = Color.GREEN
	health = 1 # One hit to activate

func _process(delta):
	super._process(delta)
	
	if is_fuse_lit:
		fuse_timer += delta
		
		# Blinking fuse effect (faster than TNT)
		#var blink_speed = lerp(5.0, 20.0, fuse_timer / fuse_time)
		#fuse_light.modulate.a = (sin(fuse_timer * blink_speed) + 1.0) / 2.0
		#
		# Explode when timer runs out
		if fuse_timer >= fuse_time:
			remote_explode()

func on_player_interaction(_player):
	if not is_fuse_lit:
		light_fuse()

func take_damage(_amount: int = 1):
	if not is_fuse_lit:
		light_fuse()

func light_fuse():
	if is_fuse_lit:
		return
	
	is_fuse_lit = true
	fuse_timer = 0.0
	
	# Visual feedback
	sprite.modulate = Color.GREEN
	fuse_light.visible = true
	fuse_light.modulate = Color.RED
	
	# Audio feedback
	print(\"Nitro fuse lit! Exploding in \", fuse_time, \" seconds!\")

func remote_explode():
	if current_state == CrateState.BROKEN:
		return
	
	# Create explosion area
	ObjectPool.spawn_explosion(global_position, explosion_radius, explosion_damage)
	
	# Damage nearby crates and player
	var space_state = get_world_2d().direct_space_state
	var query = PhysicsShapeQueryParameters2D.new()
	var circle_shape = CircleShape2D.new()
	circle_shape.radius = explosion_radius
	query.shape = circle_shape
	query.transform = Transform2D(0, global_position)
	query.collision_mask = 1 # Adjust based on your collision layers
	
	var results = space_state.intersect_shape(query)
	for result in results:
		var body = result.collider
		print(\"Collider: \", body, body is Player, body.has_method(\"take_damage\"))
		if body is Player:
			# Damage player with explosion damage (2 hearts)
			if body.has_method(\"take_damage\"):
				body.take_damage(int(explosion_damage))
			else:
				body.die()
		elif body is Crate and body != self:
			# Chain reaction with other crates
			body.take_damage(explosion_damage)
		elif body.is_in_group(\"enemies\"):
			# Kill enemies in blast radius
			if body.has_method(\"take_damage\"):
				body.take_damage(1)
		elif body.is_in_group(\"collectibles\"):
			# Destroy collectibles in blast radius
			if body.has_method(\"queue_free\"):
				body.queue_free()
			elif body.has_method(\"collect\"):
				body.collect()
	
	# Break this crate
	break_crate()

func spawn_specific_effects():
	# Spawn explosion particles (bigger than TNT)
	ObjectPool.spawn_explosion(global_position, explosion_radius * 0.7, 0)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_crate"]
size = Vector2(32, 32)

[sub_resource type="RectangleShape2D" id="RectangleShape2D_area"]
size = Vector2(36, 36)

[sub_resource type="Animation" id="Animation_bounce"]
resource_name = "bounce"
length = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CrateSprite:size")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.5),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(32, 32), Vector2(36, 28), Vector2(32, 32)]
}

[sub_resource type="Animation" id="Animation_explode"]
resource_name = "explode"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CrateSprite:size")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.15, 0.3),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(32, 32), Vector2(40, 24), Vector2(0, 0)]
}

[sub_resource type="Animation" id="Animation_idle"]
resource_name = "idle"
length = 2.0
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("CrateSprite:size")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1, 2),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(32, 32), Vector2(33, 31), Vector2(32, 32)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_1"]
_data = {
&"bounce": SubResource("Animation_bounce"),
&"explode": SubResource("Animation_explode"),
&"idle": SubResource("Animation_idle")
}

[node name="NitroCrate" type="StaticBody2D"]
script = SubResource("GDScript_4n3vw")
shard_color = Color(0, 1, 0, 1)

[node name="DebugBorder" type="Node2D" parent="."]
script = ExtResource("3_debug")

[node name="CrateSprite" type="ColorRect" parent="."]
offset_left = -16.0
offset_top = -16.0
offset_right = 16.0
offset_bottom = 16.0
color = Color(0, 0.8, 0, 1)

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_crate")

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 0
collision_mask = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("RectangleShape2D_area")

[node name="HealthLabel" type="Label" parent="."]
offset_left = -8.0
offset_top = -8.0
offset_right = 8.0
offset_bottom = 8.0
theme_override_colors/font_color = Color(1, 1, 1, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 2
theme_override_font_sizes/font_size = 16
text = "1"
horizontal_alignment = 1
vertical_alignment = 1

[node name="WarningSprite" type="ColorRect" parent="."]
visible = false
offset_left = -30.0
offset_top = -30.0
offset_right = 30.0
offset_bottom = 30.0
color = Color(1, 0, 0, 0.3)

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
&"": SubResource("AnimationLibrary_1")
}
autoplay = "idle"
