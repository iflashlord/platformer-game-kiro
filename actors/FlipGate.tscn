[gd_scene load_steps=8 format=3 uid="uid://clxelv18ro8kt"]

[sub_resource type="GDScript" id="GDScript_mjhth"]
script/source = "extends Area2D
class_name FlipGate

@onready var gate_frame: Node2D = $GateFrame
@onready var energy_field: Node2D = $EnergyField
@onready var core_orb: Node2D = $CoreOrb
@onready var particles: CPUParticles2D = $Particles
@onready var activation_particles: CPUParticles2D = $ActivationParticles
@onready var energy_particles: CPUParticles2D = $EnergyParticles
@onready var collision_shape: CollisionShape2D = $CollisionShape2D
@onready var activation_timer: Timer = $ActivationTimer
@onready var animation_timer: Timer = $AnimationTimer

@export var gate_width: float = 80.0
@export var gate_height: float = 140.0
@export var target_layer: String = \"\"  # \"A\" or \"B\", empty for toggle
@export var activation_cooldown: float = 1.5

var activated: bool = false
var current_layer: String = \"A\"
var idle_tween: Tween
var energy_tween: Tween

signal layer_switched(new_layer: String)

func _ready():
	# Set up collision detection
	body_entered.connect(_on_body_entered)
	activation_timer.timeout.connect(_reset_activation)
	animation_timer.timeout.connect(_animate_gate)
	
	# Set collision layers
	collision_layer = 16  # FlipGate layer
	collision_mask = 2    # Player layer
	
	# Setup collision shape
	var rect_shape = RectangleShape2D.new()
	rect_shape.size = Vector2(gate_width, gate_height)
	collision_shape.shape = rect_shape
	
	# Setup timers
	activation_timer.wait_time = activation_cooldown
	activation_timer.one_shot = true
	animation_timer.wait_time = 0.05
	animation_timer.autostart = true
	
	# Add to groups
	add_to_group(\"flip_gates\")
	
	# Start idle animations
	_start_idle_animations()
	
	print(\"🌀 FlipGate initialized - Target layer: \", target_layer if target_layer != \"\" else \"toggle\")

func _start_idle_animations():
	# Pulsing energy field
energy_tween = create_tween()
	energy_tween.set_loops(10)
	energy_tween.parallel().tween_property(energy_field, \"modulate\", Color(1, 0.3, 1, 0.4), 1.2)
	energy_tween.parallel().tween_property(energy_field, \"modulate\", Color(1, 0.7, 1, 0.8), 1.2)
	
	# Floating core orb
	idle_tween = create_tween()
	idle_tween.set_loops(10)
	idle_tween.parallel().tween_property(core_orb, \"position\", Vector2(0, -5), 2.0)
	idle_tween.parallel().tween_property(core_orb, \"position\", Vector2(0, 5), 2.0)
	idle_tween.parallel().tween_property(core_orb, \"rotation\", TAU, 3.0)

func _animate_gate():
	# Random energy sparkles
	var colors = [
		Color(1, 0.5, 1, 0.8),    # Magenta
		Color(0.7, 0.3, 1, 0.8),  # Purple
		Color(1, 0.3, 0.7, 0.8),  # Pink
		Color(0.5, 0.8, 1, 0.8)   # Light blue
	]
	
	var new_color = colors[randi() % colors.size()]
	particles.color = new_color
	
	# Occasional energy burst
	if randf() < 0.1:
		energy_particles.restart()

func _on_body_entered(body):
	if body.has_method(\"get_groups\") and body.is_in_group(\"player\") and not activated:
		print(\"🌀 Player entered FlipGate\")
		_activate_gate(body)

func _activate_gate(player):
	if activated:
		return
		
	activated = true
	print(\"🌀 FlipGate activating...\")
	
	# Stop idle animations
	if idle_tween:
		idle_tween.kill()
	if energy_tween:
		energy_tween.kill()
	
	# Determine target layer
	var new_layer = _get_target_layer()
	current_layer = new_layer
	
	# Trigger dimension flip if systems exist
	_trigger_dimension_flip(new_layer)
	
	# Visual and audio feedback
	_play_activation_effects()
	
	# Emit signal for other systems
	layer_switched.emit(new_layer)
	
	# Start cooldown
	activation_timer.start()
	
	print(\"🌀 FlipGate activated - Layer: \", new_layer)

func _get_target_layer() -> String:
	if target_layer != \"\":
		return target_layer
	
	# Try to get current layer from DimensionManager
	var dim_manager = _find_dimension_manager()
	if dim_manager and dim_manager.has_method(\"get_current_layer\"):
		var current = dim_manager.get_current_layer()
		return \"B\" if current == \"A\" else \"A\"
	
	# Fallback toggle
	return \"B\" if current_layer == \"A\" else \"A\"

func _trigger_dimension_flip(new_layer: String):
	# Find and use DimensionManager
	var dim_manager = _find_dimension_manager()
	if dim_manager and dim_manager.has_method(\"set_layer\"):
		dim_manager.set_layer(new_layer)
		print(\"🌀 Successfully triggered dimension flip to: \", new_layer)
	else:
		print(\"⚠️ No DimensionManager found - layer switch failed\")

func _find_dimension_manager() -> Node:
	# Try multiple locations to find DimensionManager
	
	# 1. Try as autoload
	if has_node(\"/root/DimensionManager\"):
		return get_node(\"/root/DimensionManager\")
	
	# 2. Try in current scene
	var current_scene = get_tree().current_scene
	if current_scene and current_scene.has_node(\"DimensionManager\"):
		return current_scene.get_node(\"DimensionManager\")
	
	# 3. Try to find by group
	var managers = get_tree().get_nodes_in_group(\"dimension_managers\")
	if managers.size() > 0:
		return managers[0]
	
	# 4. Try to find by class name
	var all_nodes = get_tree().get_nodes_in_group(\"dimension_managers\")
	for node in all_nodes:
		if node.get_script() and node.get_script().get_path().ends_with(\"DimensionManager.gd\"):
			return node
	
	return null

func _play_activation_effects():
	# Screen effects if available
	if has_node(\"/root/FX\"):
		var fx = get_node(\"/root/FX\")
		if fx.has_method(\"flash_screen\"):
			fx.flash_screen(Color(1, 0.5, 1, 0.4), 0.3)
		if fx.has_method(\"hit_stop\"):
			fx.hit_stop(80)
	
	# Audio feedback if available
	if has_node(\"/root/Audio\"):
		var audio = get_node(\"/root/Audio\")
		if audio.has_method(\"play_sfx\"):
			audio.play_sfx(\"dimension_gate\")
	
	# Massive particle burst
	if activation_particles:
		activation_particles.restart()
		activation_particles.emitting = true
	
	if particles:
		particles.amount = 80
		particles.initial_velocity_max = 150.0
		particles.restart()
	
	# Gate visual effects
var activation_tween: Tween = create_tween()
	activation_tween.set_parallel(true)
	
	# Bright flash
	activation_tween.tween_property(gate_frame, \"modulate\", Color.WHITE * 2.0, 0.1)
	activation_tween.tween_property(energy_field, \"modulate\", Color.WHITE * 3.0, 0.1)
	activation_tween.tween_property(core_orb, \"modulate\", Color.WHITE * 4.0, 0.1)
	
	# Scale pulse
	activation_tween.tween_property(gate_frame, \"scale\", Vector2(1.2, 1.2), 0.2)
	activation_tween.tween_property(energy_field, \"scale\", Vector2(1.3, 1.3), 0.2)
	
	# Return to normal
	activation_tween.tween_property(gate_frame, \"modulate\", Color(0.8, 0.4, 1, 1), 0.5)
	activation_tween.tween_property(energy_field, \"modulate\", Color(1, 0.5, 1, 0.6), 0.5)
	activation_tween.tween_property(core_orb, \"modulate\", Color(1, 1, 1, 1), 0.5)
	activation_tween.tween_property(gate_frame, \"scale\", Vector2.ONE, 0.3)
	activation_tween.tween_property(energy_field, \"scale\", Vector2.ONE, 0.3)
	
	# Spin effect
	activation_tween.tween_property(core_orb, \"rotation\", core_orb.rotation + TAU * 2, 0.8)

func _reset_activation():
	activated = false
	print(\"🌀 FlipGate ready for next activation\")
	
	# Restart idle animations
	_start_idle_animations()
	
	# Reset particle amounts
	if particles:
		particles.amount = 30
		particles.initial_velocity_max = 80.0

# Public methods for external control
func set_target_layer(layer: String):
	target_layer = layer
	print(\"🌀 FlipGate target layer set to: \", layer)

func force_activate():
	if not activated:
		_activate_gate(null)

func get_current_layer() -> String:
	return current_layer
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_1"]
size = Vector2(80, 140)

[sub_resource type="Gradient" id="Gradient_1"]
colors = PackedColorArray(1, 0.5, 1, 1, 1, 0.5, 1, 0)

[sub_resource type="Gradient" id="Gradient_2"]
offsets = PackedFloat32Array(0, 1, 0)
colors = PackedColorArray(1, 1, 1, 1, 1, 0.5, 1, 0.5, 0.8, 0.3, 1, 0)

[sub_resource type="Gradient" id="Gradient_3"]
offsets = PackedFloat32Array(0, 1, 0)
colors = PackedColorArray(1, 0.8, 1, 1, 0.7, 0.3, 1, 0.8, 0.5, 0.1, 0.8, 0)

[sub_resource type="Gradient" id="Gradient_4"]
offsets = PackedFloat32Array(0, 0, 1)
colors = PackedColorArray(1, 1, 0.8, 1, 0.8, 0.4, 1, 0, 1, 0.6, 0.9, 0.6)

[sub_resource type="Gradient" id="Gradient_5"]
offsets = PackedFloat32Array(0, 0, 1)
colors = PackedColorArray(0.9, 0.4, 1, 1, 0.5, 0.1, 0.7, 0, 0.7, 0.2, 0.9, 0.7)

[node name="FlipGate" type="Area2D"]
script = SubResource("GDScript_mjhth")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_1")

[node name="GateFrame" type="Node2D" parent="."]

[node name="LeftPillar" type="Polygon2D" parent="GateFrame"]
color = Color(0.6, 0.3, 0.8, 0.9)
polygon = PackedVector2Array(-45, -70, -35, -70, -35, 70, -45, 70)

[node name="RightPillar" type="Polygon2D" parent="GateFrame"]
color = Color(0.6, 0.3, 0.8, 0.9)
polygon = PackedVector2Array(35, -70, 45, -70, 45, 70, 35, 70)

[node name="TopBeam" type="Polygon2D" parent="GateFrame"]
color = Color(0.7, 0.4, 0.9, 0.9)
polygon = PackedVector2Array(-45, -70, 45, -70, 45, -60, -45, -60)

[node name="LeftGem" type="Polygon2D" parent="GateFrame"]
color = Color(1, 0.6, 1, 1)
polygon = PackedVector2Array(-40, -65, -35, -67, -30, -65, -35, -63)

[node name="RightGem" type="Polygon2D" parent="GateFrame"]
color = Color(1, 0.6, 1, 1)
polygon = PackedVector2Array(30, -65, 35, -67, 40, -65, 35, -63)

[node name="EnergyField" type="Node2D" parent="."]

[node name="EnergyMesh" type="Polygon2D" parent="EnergyField"]
color = Color(1, 0.5, 1, 0.6)
polygon = PackedVector2Array(-35, -60, 35, -60, 35, 70, -35, 70)

[node name="EnergyLines" type="Node2D" parent="EnergyField"]

[node name="Line1" type="Polygon2D" parent="EnergyField/EnergyLines"]
color = Color(1, 0.8, 1, 0.4)
polygon = PackedVector2Array(-30, -50, -28, -50, -28, 60, -30, 60)

[node name="Line2" type="Polygon2D" parent="EnergyField/EnergyLines"]
color = Color(1, 0.8, 1, 0.4)
polygon = PackedVector2Array(-10, -50, -8, -50, -8, 60, -10, 60)

[node name="Line3" type="Polygon2D" parent="EnergyField/EnergyLines"]
color = Color(1, 0.8, 1, 0.4)
polygon = PackedVector2Array(8, -50, 10, -50, 10, 60, 8, 60)

[node name="Line4" type="Polygon2D" parent="EnergyField/EnergyLines"]
color = Color(1, 0.8, 1, 0.4)
polygon = PackedVector2Array(28, -50, 30, -50, 30, 60, 28, 60)

[node name="CoreOrb" type="Node2D" parent="."]

[node name="OrbOuter" type="Polygon2D" parent="CoreOrb"]
color = Color(1, 0.7, 1, 0.8)
polygon = PackedVector2Array(-12, 0, -8.49, -8.49, 0, -12, 8.49, -8.49, 12, 0, 8.49, 8.49, 0, 12, -8.49, 8.49)

[node name="OrbInner" type="Polygon2D" parent="CoreOrb"]
color = Color(1, 1, 1, 0.9)
polygon = PackedVector2Array(-8, 0, -5.66, -5.66, 0, -8, 5.66, -5.66, 8, 0, 5.66, 5.66, 0, 8, -5.66, 5.66)

[node name="OrbCore" type="Polygon2D" parent="CoreOrb"]
color = Color(1, 1, 0.8, 1)
polygon = PackedVector2Array(-4, 0, -2.83, -2.83, 0, -4, 2.83, -2.83, 4, 0, 2.83, 2.83, 0, 4, -2.83, 2.83)

[node name="Particles" type="CPUParticles2D" parent="."]
amount = 30
lifetime = 3.0
emission_shape = 3
emission_rect_extents = Vector2(35, 65)
direction = Vector2(0, -1)
spread = 20.0
gravity = Vector2(0, -25)
initial_velocity_min = 30.0
initial_velocity_max = 80.0
scale_amount_min = 0.3
color = Color(1, 0.5, 1, 0.8)
color_ramp = SubResource("Gradient_1")

[node name="ActivationParticles" type="CPUParticles2D" parent="."]
emitting = false
amount = 100
lifetime = 2.0
emission_shape = 3
emission_rect_extents = Vector2(40, 70)
direction = Vector2(0, -1)
spread = 180.0
gravity = Vector2(0, -50)
initial_velocity_min = 80.0
initial_velocity_max = 200.0
scale_amount_min = 0.5
scale_amount_max = 2.0
color = Color(1, 0.8, 1, 1)
color_ramp = SubResource("Gradient_2")

[node name="EnergyParticles" type="CPUParticles2D" parent="."]
emitting = false
amount = 50
lifetime = 1.5
emission_shape = 3
emission_rect_extents = Vector2(30, 60)
direction = Vector2(0, 0)
spread = 180.0
gravity = Vector2(0, 0)
initial_velocity_min = 40.0
initial_velocity_max = 100.0
scale_amount_min = 0.2
scale_amount_max = 0.8
color = Color(0.8, 0.4, 1, 0.7)
color_ramp = SubResource("Gradient_3")

[node name="AmbientParticles" type="CPUParticles2D" parent="."]
amount = 15
lifetime = 4.0
emission_shape = 3
emission_rect_extents = Vector2(50, 75)
direction = Vector2(0, 0)
spread = 180.0
gravity = Vector2(0, 0)
initial_velocity_min = 10.0
initial_velocity_max = 30.0
scale_amount_min = 0.1
scale_amount_max = 0.5
color = Color(1, 0.9, 1, 0.4)
color_ramp = SubResource("Gradient_4")

[node name="SparkParticles" type="CPUParticles2D" parent="."]
lifetime = 2.5
emission_shape = 1
emission_sphere_radius = 15.0
direction = Vector2(0, 0)
spread = 180.0
gravity = Vector2(0, 0)
initial_velocity_min = 20.0
initial_velocity_max = 60.0
scale_amount_min = 0.2
scale_amount_max = 0.6
color = Color(0.9, 0.6, 1, 0.6)
color_ramp = SubResource("Gradient_5")

[node name="Label" type="Label" parent="."]
offset_left = -50.0
offset_top = -95.0
offset_right = 50.0
offset_bottom = -75.0
theme_override_colors/font_color = Color(1, 0.8, 1, 0.9)
theme_override_colors/font_shadow_color = Color(0.5, 0.2, 0.8, 0.8)
theme_override_constants/shadow_offset_x = 1
theme_override_constants/shadow_offset_y = 1
theme_override_font_sizes/font_size = 10
text = "DIMENSION GATE"
horizontal_alignment = 1

[node name="ActivationTimer" type="Timer" parent="."]
wait_time = 1.5
one_shot = true

[node name="AnimationTimer" type="Timer" parent="."]
wait_time = 0.05
autostart = true
